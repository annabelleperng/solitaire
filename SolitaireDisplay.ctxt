#BlueJ class context
comment0.params=game
comment0.target=SolitaireDisplay(Solitaire)
comment0.text=\n\ Constructor\ of\ objects\ of\ SolitaireDisplay\ class.\n\ \n\ @param\ \ \ game\ \ \ \ the\ game\ to\ be\ displayed\ onscreen\n
comment1.params=g
comment1.target=void\ paintComponent(java.awt.Graphics)
comment1.text=\n\ Constructs\ a\ visual\ representation\ of\ the\ solitaire\ game,\ including\ \n\ the\ stock,\ waste,\ piles,\ and\ foundations.\n\ \n\ @param\ \ \ g\ \ \ the\ display\ window\ which\ the\ game\ is\ to\ be\ shown\ on\n
comment10.params=
comment10.target=boolean\ isWasteSelected()
comment10.text=\n\ Determines\ if\ the\ waste\ pile\ has\ been\ selected.\n\ \n\ @return\ \ true\ if\ the\ waste\ has\ been\ selected\ by\ the\ user;\ otherwise,\n\ \ \ \ \ \ \ \ \ \ false\n
comment11.params=
comment11.target=void\ selectWaste()
comment11.text=\n\ Selects\ the\ waste\ pile.\n
comment12.params=
comment12.target=boolean\ isPileSelected()
comment12.text=\n\ Determines\ if\ any\ of\ the\ seven\ piles\ has\ been\ selected.\n\ \n\ @return\ \ true\ if\ a\ pile\ has\ been\ selected\ by\ the\ user;\ otherwise,\n\ \ \ \ \ \ \ \ \ \ false\n
comment13.params=
comment13.target=int\ selectedPile()
comment13.text=\n\ Returns\ information\ denoting\ which\ of\ the\ seven\ piles\ has\ been\ selected,\n\ if\ one\ of\ the\ piles\ has\ been\ selected.\n\ \n\ @return\ \ an\ integer\ (0\ \u2264\ integer\ \u2264\ 6)\ corresponding\ to\ the\ pile\ which\ has\ been\ selected\n\ \ \ \ \ \ \ \ \ \ (or\ -1,\ if\ no\ pile\ is\ selected)\n
comment14.params=index
comment14.target=void\ selectPile(int)
comment14.text=\n\ Selects\ the\ pile\ at\ int\ index,\ where\ 0\ \u2264\ index\ \u2264\ 6.\n\ \n\ @param\ \ \ index\ \ \ the\ index\ of\ the\ pile\ to\ be\ selected\n
comment2.params=g\ card\ x\ y
comment2.target=void\ drawCard(java.awt.Graphics,\ Card,\ int,\ int)
comment2.text=\n\ Displays\ a\ card,\ if\ it\ is\ non-null,\ at\ position\ (x,y).\n\ \n\ @param\ \ \ g\ \ \ \ \ \ \ the\ display\ window\ which\ the\ game\ is\ to\ be\ shown\ on\n\ @param\ \ \ card\ \ \ \ the\ card\ to\ be\ displayed\n\ @param\ \ \ x\ \ \ \ \ \ \ integer\ coordinate\ corresponding\ to\ the\ horizontal\ position\ of\ the\ card\n\ @param\ \ \ y\ \ \ \ \ \ \ integer\ coordinate\ corresponding\ to\ the\ vertical\ position\ of\ the\ card\n\ \n
comment3.params=e
comment3.target=void\ mouseExited(java.awt.event.MouseEvent)
comment3.text=\n\ Tracks\ if\ the\ mouse\ has\ left\ the\ area\ of\ the\ display.\n\ \n\ @param\ \ \ e\ \ \ the\ mouse-based\ user\ interaction\n
comment4.params=e
comment4.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment4.text=\n\ Tracks\ if\ the\ mouse\ is\ within\ the\ area\ of\ the\ display.\n\ \n\ @param\ \ \ e\ \ \ the\ mouse-based\ user\ interaction\n
comment5.params=e
comment5.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment5.text=\n\ Tracks\ a\ release\ of\ the\ mouse.\n\ \n\ @param\ \ \ e\ \ \ the\ mouse-based\ user\ interaction\n
comment6.params=e
comment6.target=void\ mousePressed(java.awt.event.MouseEvent)
comment6.text=\n\ Tracks\ a\ press\ of\ the\ mouse.\n\ \n\ @param\ \ \ e\ \ \ the\ mouse-based\ user\ interaction\n
comment7.params=e
comment7.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment7.text=\n\ Tracks\ if\ the\ mouse\ has\ been\ clicked.\n\ \n\ @param\ \ \ e\ \ \ the\ mouse-based\ user\ interaction\n
comment8.params=g\ x\ y
comment8.target=void\ drawBorder(java.awt.Graphics,\ int,\ int)
comment8.text=\n\ Draws\ the\ border\ around\ a\ card.\n\ \n\ @param\ \ \ g\ \ \ \ \ \ \ the\ display\ window\ which\ the\ game\ is\ to\ be\ shown\ on\n\ @param\ \ \ x\ \ \ \ \ \ \ integer\ coordinate\ corresponding\ to\ the\ horizontal\ position\ of\ the\ card\n\ @param\ \ \ y\ \ \ \ \ \ \ integer\ coordinate\ corresponding\ to\ the\ vertical\ position\ of\ the\ card\n
comment9.params=
comment9.target=void\ unselect()
comment9.text=\n\ Unselects\ any\ clicked\ pile.\n
numComments=15
